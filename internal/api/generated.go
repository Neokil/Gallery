// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	SessionAuthScopes = "sessionAuth.Scopes"
)

// GetGalleryParams defines parameters for GetGallery.
type GetGalleryParams struct {
	// Event Filter photos by event name
	Event *string `form:"event,omitempty" json:"event,omitempty"`

	// Uploader Filter photos by uploader name
	Uploader *string `form:"uploader,omitempty" json:"uploader,omitempty"`
}

// DownloadAllPhotosParams defines parameters for DownloadAllPhotos.
type DownloadAllPhotosParams struct {
	// Event Filter photos by event name
	Event *string `form:"event,omitempty" json:"event,omitempty"`

	// Uploader Filter photos by uploader name
	Uploader *string `form:"uploader,omitempty" json:"uploader,omitempty"`
}

// PostLoginFormdataBody defines parameters for PostLogin.
type PostLoginFormdataBody struct {
	// Password Gallery password
	Password string `form:"password" json:"password"`
}

// UploadPhotosMultipartBody defines parameters for UploadPhotos.
type UploadPhotosMultipartBody struct {
	// EventName Event name for organizing photos
	EventName *string `json:"event_name,omitempty"`

	// Photos Photo files to upload
	Photos []openapi_types.File `json:"photos"`

	// UploaderName Name of the person uploading photos
	UploaderName *string `json:"uploader_name,omitempty"`
}

// PostLoginFormdataRequestBody defines body for PostLogin for application/x-www-form-urlencoded ContentType.
type PostLoginFormdataRequestBody PostLoginFormdataBody

// UploadPhotosMultipartRequestBody defines body for UploadPhotos for multipart/form-data ContentType.
type UploadPhotosMultipartRequestBody UploadPhotosMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gallery page
	// (GET /)
	GetGallery(w http.ResponseWriter, r *http.Request, params GetGalleryParams)
	// Download all photos as ZIP
	// (GET /download-all)
	DownloadAllPhotos(w http.ResponseWriter, r *http.Request, params DownloadAllPhotosParams)
	// Login page
	// (GET /login)
	GetLogin(w http.ResponseWriter, r *http.Request)
	// Authenticate user
	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request)
	// Logout user
	// (GET /logout)
	GetLogout(w http.ResponseWriter, r *http.Request)
	// Serve static assets
	// (GET /static/{filename})
	ServeStatic(w http.ResponseWriter, r *http.Request, filename string)
	// Upload photos
	// (POST /upload)
	UploadPhotos(w http.ResponseWriter, r *http.Request)
	// Serve uploaded photo
	// (GET /uploads/{filename})
	ServePhoto(w http.ResponseWriter, r *http.Request, filename string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Gallery page
// (GET /)
func (_ Unimplemented) GetGallery(w http.ResponseWriter, r *http.Request, params GetGalleryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Download all photos as ZIP
// (GET /download-all)
func (_ Unimplemented) DownloadAllPhotos(w http.ResponseWriter, r *http.Request, params DownloadAllPhotosParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Login page
// (GET /login)
func (_ Unimplemented) GetLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Authenticate user
// (POST /login)
func (_ Unimplemented) PostLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Logout user
// (GET /logout)
func (_ Unimplemented) GetLogout(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Serve static assets
// (GET /static/{filename})
func (_ Unimplemented) ServeStatic(w http.ResponseWriter, r *http.Request, filename string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upload photos
// (POST /upload)
func (_ Unimplemented) UploadPhotos(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Serve uploaded photo
// (GET /uploads/{filename})
func (_ Unimplemented) ServePhoto(w http.ResponseWriter, r *http.Request, filename string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetGallery operation middleware
func (siw *ServerInterfaceWrapper) GetGallery(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGalleryParams

	// ------------- Optional query parameter "event" -------------

	err = runtime.BindQueryParameter("form", true, false, "event", r.URL.Query(), &params.Event)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "event", Err: err})
		return
	}

	// ------------- Optional query parameter "uploader" -------------

	err = runtime.BindQueryParameter("form", true, false, "uploader", r.URL.Query(), &params.Uploader)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uploader", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGallery(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DownloadAllPhotos operation middleware
func (siw *ServerInterfaceWrapper) DownloadAllPhotos(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DownloadAllPhotosParams

	// ------------- Optional query parameter "event" -------------

	err = runtime.BindQueryParameter("form", true, false, "event", r.URL.Query(), &params.Event)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "event", Err: err})
		return
	}

	// ------------- Optional query parameter "uploader" -------------

	err = runtime.BindQueryParameter("form", true, false, "uploader", r.URL.Query(), &params.Uploader)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uploader", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DownloadAllPhotos(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLogin operation middleware
func (siw *ServerInterfaceWrapper) GetLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLogout operation middleware
func (siw *ServerInterfaceWrapper) GetLogout(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLogout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ServeStatic operation middleware
func (siw *ServerInterfaceWrapper) ServeStatic(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "filename" -------------
	var filename string

	err = runtime.BindStyledParameterWithOptions("simple", "filename", chi.URLParam(r, "filename"), &filename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filename", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ServeStatic(w, r, filename)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UploadPhotos operation middleware
func (siw *ServerInterfaceWrapper) UploadPhotos(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadPhotos(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ServePhoto operation middleware
func (siw *ServerInterfaceWrapper) ServePhoto(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "filename" -------------
	var filename string

	err = runtime.BindStyledParameterWithOptions("simple", "filename", chi.URLParam(r, "filename"), &filename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filename", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ServePhoto(w, r, filename)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/", wrapper.GetGallery)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/download-all", wrapper.DownloadAllPhotos)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/login", wrapper.GetLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.PostLogin)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/logout", wrapper.GetLogout)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/static/{filename}", wrapper.ServeStatic)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/upload", wrapper.UploadPhotos)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/uploads/{filename}", wrapper.ServePhoto)
	})

	return r
}

type GetGalleryRequestObject struct {
	Params GetGalleryParams
}

type GetGalleryResponseObject interface {
	VisitGetGalleryResponse(w http.ResponseWriter) error
}

type GetGallery200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetGallery200TexthtmlResponse) VisitGetGalleryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetGallery302Response struct {
}

func (response GetGallery302Response) VisitGetGalleryResponse(w http.ResponseWriter) error {
	w.WriteHeader(302)
	return nil
}

type GetGallery500Response struct {
}

func (response GetGallery500Response) VisitGetGalleryResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DownloadAllPhotosRequestObject struct {
	Params DownloadAllPhotosParams
}

type DownloadAllPhotosResponseObject interface {
	VisitDownloadAllPhotosResponse(w http.ResponseWriter) error
}

type DownloadAllPhotos200ApplicationzipResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response DownloadAllPhotos200ApplicationzipResponse) VisitDownloadAllPhotosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/zip")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type DownloadAllPhotos401Response struct {
}

func (response DownloadAllPhotos401Response) VisitDownloadAllPhotosResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DownloadAllPhotos404Response struct {
}

func (response DownloadAllPhotos404Response) VisitDownloadAllPhotosResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DownloadAllPhotos405Response struct {
}

func (response DownloadAllPhotos405Response) VisitDownloadAllPhotosResponse(w http.ResponseWriter) error {
	w.WriteHeader(405)
	return nil
}

type DownloadAllPhotos500Response struct {
}

func (response DownloadAllPhotos500Response) VisitDownloadAllPhotosResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetLoginRequestObject struct {
}

type GetLoginResponseObject interface {
	VisitGetLoginResponse(w http.ResponseWriter) error
}

type GetLogin200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetLogin200TexthtmlResponse) VisitGetLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type PostLoginRequestObject struct {
	Body *PostLoginFormdataRequestBody
}

type PostLoginResponseObject interface {
	VisitPostLoginResponse(w http.ResponseWriter) error
}

type PostLogin200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response PostLogin200TexthtmlResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type PostLogin302Response struct {
}

func (response PostLogin302Response) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(302)
	return nil
}

type GetLogoutRequestObject struct {
}

type GetLogoutResponseObject interface {
	VisitGetLogoutResponse(w http.ResponseWriter) error
}

type GetLogout302Response struct {
}

func (response GetLogout302Response) VisitGetLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(302)
	return nil
}

type ServeStaticRequestObject struct {
	Filename string `json:"filename"`
}

type ServeStaticResponseObject interface {
	VisitServeStaticResponse(w http.ResponseWriter) error
}

type ServeStatic200AsteriskResponse struct {
	Body          io.Reader
	ContentType   string
	ContentLength int64
}

func (response ServeStatic200AsteriskResponse) VisitServeStaticResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ServeStatic404Response struct {
}

func (response ServeStatic404Response) VisitServeStaticResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UploadPhotosRequestObject struct {
	Body *multipart.Reader
}

type UploadPhotosResponseObject interface {
	VisitUploadPhotosResponse(w http.ResponseWriter) error
}

type UploadPhotos302Response struct {
}

func (response UploadPhotos302Response) VisitUploadPhotosResponse(w http.ResponseWriter) error {
	w.WriteHeader(302)
	return nil
}

type UploadPhotos400Response struct {
}

func (response UploadPhotos400Response) VisitUploadPhotosResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UploadPhotos401Response struct {
}

func (response UploadPhotos401Response) VisitUploadPhotosResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UploadPhotos405Response struct {
}

func (response UploadPhotos405Response) VisitUploadPhotosResponse(w http.ResponseWriter) error {
	w.WriteHeader(405)
	return nil
}

type ServePhotoRequestObject struct {
	Filename string `json:"filename"`
}

type ServePhotoResponseObject interface {
	VisitServePhotoResponse(w http.ResponseWriter) error
}

type ServePhoto200ImageResponse struct {
	Body          io.Reader
	ContentType   string
	ContentLength int64
}

func (response ServePhoto200ImageResponse) VisitServePhotoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ServePhoto401Response struct {
}

func (response ServePhoto401Response) VisitServePhotoResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ServePhoto404Response struct {
}

func (response ServePhoto404Response) VisitServePhotoResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Gallery page
	// (GET /)
	GetGallery(ctx context.Context, request GetGalleryRequestObject) (GetGalleryResponseObject, error)
	// Download all photos as ZIP
	// (GET /download-all)
	DownloadAllPhotos(ctx context.Context, request DownloadAllPhotosRequestObject) (DownloadAllPhotosResponseObject, error)
	// Login page
	// (GET /login)
	GetLogin(ctx context.Context, request GetLoginRequestObject) (GetLoginResponseObject, error)
	// Authenticate user
	// (POST /login)
	PostLogin(ctx context.Context, request PostLoginRequestObject) (PostLoginResponseObject, error)
	// Logout user
	// (GET /logout)
	GetLogout(ctx context.Context, request GetLogoutRequestObject) (GetLogoutResponseObject, error)
	// Serve static assets
	// (GET /static/{filename})
	ServeStatic(ctx context.Context, request ServeStaticRequestObject) (ServeStaticResponseObject, error)
	// Upload photos
	// (POST /upload)
	UploadPhotos(ctx context.Context, request UploadPhotosRequestObject) (UploadPhotosResponseObject, error)
	// Serve uploaded photo
	// (GET /uploads/{filename})
	ServePhoto(ctx context.Context, request ServePhotoRequestObject) (ServePhotoResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetGallery operation middleware
func (sh *strictHandler) GetGallery(w http.ResponseWriter, r *http.Request, params GetGalleryParams) {
	var request GetGalleryRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGallery(ctx, request.(GetGalleryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGallery")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGalleryResponseObject); ok {
		if err := validResponse.VisitGetGalleryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DownloadAllPhotos operation middleware
func (sh *strictHandler) DownloadAllPhotos(w http.ResponseWriter, r *http.Request, params DownloadAllPhotosParams) {
	var request DownloadAllPhotosRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DownloadAllPhotos(ctx, request.(DownloadAllPhotosRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DownloadAllPhotos")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DownloadAllPhotosResponseObject); ok {
		if err := validResponse.VisitDownloadAllPhotosResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLogin operation middleware
func (sh *strictHandler) GetLogin(w http.ResponseWriter, r *http.Request) {
	var request GetLoginRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLogin(ctx, request.(GetLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLogin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLoginResponseObject); ok {
		if err := validResponse.VisitGetLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostLogin operation middleware
func (sh *strictHandler) PostLogin(w http.ResponseWriter, r *http.Request) {
	var request PostLoginRequestObject

	if err := r.ParseForm(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
		return
	}
	var body PostLoginFormdataRequestBody
	if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogin(ctx, request.(PostLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostLoginResponseObject); ok {
		if err := validResponse.VisitPostLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLogout operation middleware
func (sh *strictHandler) GetLogout(w http.ResponseWriter, r *http.Request) {
	var request GetLogoutRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLogout(ctx, request.(GetLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLogout")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLogoutResponseObject); ok {
		if err := validResponse.VisitGetLogoutResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ServeStatic operation middleware
func (sh *strictHandler) ServeStatic(w http.ResponseWriter, r *http.Request, filename string) {
	var request ServeStaticRequestObject

	request.Filename = filename

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ServeStatic(ctx, request.(ServeStaticRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ServeStatic")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ServeStaticResponseObject); ok {
		if err := validResponse.VisitServeStaticResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UploadPhotos operation middleware
func (sh *strictHandler) UploadPhotos(w http.ResponseWriter, r *http.Request) {
	var request UploadPhotosRequestObject

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UploadPhotos(ctx, request.(UploadPhotosRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UploadPhotos")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UploadPhotosResponseObject); ok {
		if err := validResponse.VisitUploadPhotosResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ServePhoto operation middleware
func (sh *strictHandler) ServePhoto(w http.ResponseWriter, r *http.Request, filename string) {
	var request ServePhotoRequestObject

	request.Filename = filename

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ServePhoto(ctx, request.(ServePhotoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ServePhoto")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ServePhotoResponseObject); ok {
		if err := validResponse.VisitServePhotoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXTW/bOBP+KwRPbaHE7hdQ+Ja2b4u8u1sEa/SyRbBgpLHFLcVhyVFcN/B/XwwpWbJk",
	"O+7nZS9BbM73PPPM+E7mWDm0YCnI2Z0MkNde03qel1BB81UIGu1FTSV/LCDkXjvSaOVMztPj2Y0KUAhV",
	"UwmWdK74WdRB26XIET9qCDKTmjXSR5lJqyqQM7lUxoBfnzVuZCZp7fhBOf0brOVms2HNBbLzHC2pnPjf",
	"Rv2qRELxNhmRm2wQ34UIunIGhItyjTOhnDNtlCtN5TByZQux0AZE7QyqgoPSZEb+xMXVpczkLfiQ3D0+",
	"n55POQp0YJXTciafnj8+n8pMOkVlrOeE/yyBxsV8rYMzai2oBFEpbbfhOrWEFGdMg2uJDnyM9bKQM/kW",
	"qC0Be/KqAgIf5OzD0McbbQh8Y0fcrAXcgiURq9l06FOd7DQVjgIyk4EhoTjqpkGBvLZLudlk9zpJZQR/",
	"zE8rc9TVdSY9BIc2JHA+mU5bXHCUrAGfaVJSZSJ2DxoaIeVtv9YebAEeChHqPIcQFrUxEV1Pp0/GffsT",
	"Cu0hJ0EoDC61FXohLFIfVVCw+vMU7q76pSXwVhkRwN+CF+A9ei7rdhpjH3fm8MM1lyLUVaX8ehB9VJ0U",
	"uLJc0DNlzGHENUJCGdO26wF6xj7F/NN3D4UKQom/Lq+E8nmpb2GEwNbShTFXLUb/20Dscczki3a7cFyg",
	"rxTJmbzRVkXn9wKUqx85KZKgtsytDR1sMvls+njc3veWEYhef4FCPBgh8mFSfDZWfIdtzQhFi6Qk/Xws",
	"/QdQiUVCvDG4+slY3wdaFRidCflxBE8i2TSs3It9jPp7tPPTCCeaP0o3m37WnTgX12HYk9uVR1bv5SVC",
	"fVPpdrPupniFoZfjpxoCvcRifQTGn89Wq9UZ2z2rvQGbYwHFbtrOsxPSqVpOhbBCX4xD7QirkRhPQIpK",
	"e3bxoTN1vZXEm38gp1TbTpR8DZtf0bW4kCOARQUhNJ25d0O0Sx1t226BXtyo/GO3P9CKhdKm9jBAwUVv",
	"fkUdwG8hjzUdxPwrA8oPb5xmxuKt44cb7MA8sJNBaU/ciNvFtINorKmXRSBFOp/cMcsxF28OJjRn9hBJ",
	"XryazzPx/3kWM0EqwQsVAtD4TIpq86h133p6pyoQuIg00fjhsNqVwddctzHagOUQh9+3QR5NHn331pj3",
	"Yj/E9m94qzB7L7C2xaBLO6Vu6hq71ZzGPOV7yeh9fBdogfFdoW+PcI4lpOmpgFShSI06lZS3l8Rheqpq",
	"Q9opT5NIS9HYEUKKN8TfqW3DgP+3PUCYOgX6pbL6S2/NjsqdyeZlzMS9TAm7nxGaoAontbL7HeS9irdn",
	"e5ccCL+PWAc+8A+wqHEsgyHJJrFvodiTeU8t+CTrNl1bnIjOPSfDS8X8FPvPN0xT1KYY7Q3zzcfPiefM",
	"Vx0oDfLb46wblnA6tykRHOR6ofNtqr3xEQ+aZoQBqz/cz3kRjl9DeZ2rX8p4ulJL+AGs143fj7+Nk+0B",
	"XZ6MjdTd3ZamDNJFvK8xr+EWDLqK6SlJyUzW3siZLIncbDIxmCtTYqDZi+mLqdxcb/4NAAD//5tvvAHZ",
	"EQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
